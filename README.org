* OpenAI API

A WIP Emacs interface to OpenAI's language model REST API.

This is intended to be used as a library for building interfaces to the language models.

** Installation

[[https://github.com/jwiegley/use-package][use-package]] example:

#+begin_src emacs-lisp
(use-package openai-api
  :straight (openai-api :type git :host github :repo "dangirsh/openai-api")
  :config
  ;; required
  (setq openai-api-token <token>)       ; https://beta.openai.com/account/api-keys
  ;; optional
  (setq openai-api-engine "davinci-codex") ; requires private beta access
  (setq openai-api-completion-params '((max_tokens . 100)
                                       (temperature . 0.0)
                                       (frequency_penalty . 0)
                                       (presence_penalty . 0)
                                       (n . 1))))
#+end_src

*** Dependencies

- [[https://github.com/tkf/emacs-request][Request.el -- Easy HTTP request for Emacs Lisp]]

** Example Usages

*** Interactively

**** Complete the Region: =openai-api-complete-region=

Currently, there's only a basic interface that uses the active region as the prompt. Use like this:

1. Set =openai-api-completion-params= as necessary
2. In any buffer, select the text you'd like to send as a prompt
3. Run =openai-api-complete-region= (bind to a key for convenience)

If only one completion is returned (n = 1), it is inserted below the region.

If there are multiple completions returned (n > 1), they are handled via the built-in =completing-read= mechanism. I recommend trying [[https://github.com/minad/consult][consult]] for an improved =completing-read= interface, including live previews.

*** Programmatically: =openai-api-get-completions=

#+begin_src emacs-lisp :results verbatim :exports both
(let ((openai-api-completion-params '((max_tokens . 2)
                                       (temperature . 0.0)
                                       (frequency_penalty . 0)
                                       (presence_penalty . 0)
                                       (n . 1))))
  (car (openai-api-get-completions "2 + 2 =")))
#+end_src

#+RESULTS:
: "4"

** Notes

- I've only tested this on GNU Emacs 28.0.50.

** Related packages

- [[https://github.com/debanjum/codex-completion/][debanjum/codex-completion: Generate, Complete Code in Emacs using Op...]]
- [[https://github.com/semiosis/pen.el/][semiosis/pen.el: pen.el is a package for prompt engineering in emacs...]]
